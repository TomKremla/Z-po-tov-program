import tkinter as tk
import numpy as np
import fractions as fr

root = tk.Tk()

root.title("Linear programming solver")

window_width = 1150
window_height = 650
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
center_x = int(screen_width / 2 - window_width / 2)
center_y = int(screen_height / 2 - window_height / 2)
root.geometry(f"{window_width}x{window_height}+{center_x}+{center_y-20}")

introductory_text = tk.Label(root, text='Enter the number of variables and restrictions', font=('', 13))
introductory_text.place(x=10,y=10)

text_variables = tk.Label(root, text='Variables:', font=('', 10))
text_variables.place(x=20,y=38)

text_restrictions = tk.Label(root, text='Restrictions:', font=('', 10))
text_restrictions.place(x=140,y=38)

entry_variables = tk.Entry(root, width=5)
entry_variables.place(x=85,y=39)

entry_restrictions = tk.Entry(root, width=5)
entry_restrictions.place(x=220, y=39)

was_used = False

def apply():
    global was_used, a, c, b, restrictions_amount, restrictions_text, restrictions_type, restrictions_type_menu, restrictions_labels, variables_amount, variables_text, variables_labels,variables_type, variables_type_menu, variables_type_menu, function_text, function_labels, function_type, function_type_menu, solve_button, x_position, y_position

    #input check
    if entry_variables.get().isdigit() and entry_restrictions.get().isdigit():
        
        #clearing labels, buttons and entries
        if was_used:
            function_text.destroy()
            for entry in c:
                entry.destroy()
            for label in function_labels:
                label.destroy()
            function_type_menu.destroy()

            restrictions_text.destroy()
            for optionmenu in restrictions_type_menu:
                optionmenu.destroy()
            for line in a:
                for value in line:
                    value.destroy()
            for line in restrictions_labels:
                for label in line:
                    label.destroy()
            for entry in b:
                entry.destroy()

            variables_text.destroy()
            for optionmenu in variables_type_menu:
                optionmenu.destroy()
            for label in variables_labels:
                label.destroy()
            solve_button.destroy()

        #variables and output setup
        variables_amount = int(entry_variables.get())
        restrictions_amount = int(entry_restrictions.get())
        
        c = [0]*variables_amount
        function_labels = [0]*variables_amount

        a = []
        for i in range(restrictions_amount):
            a.append([0]*(variables_amount))
        restrictions_labels = []
        for i in range(restrictions_amount):
            restrictions_labels.append([0]*(variables_amount))
        restrictions_type = [0]*restrictions_amount
        restrictions_type_menu = [0]*restrictions_amount
        b = [0]*restrictions_amount

        variables_labels = [0]*variables_amount
        variables_type_menu = [0]*variables_amount
        variables_type = [0]*variables_amount

        #widgets for objective function
        function_text = tk.Label(root, text='Objective function:', font=('', 13))
        function_text.place(x=10, y=85)
        x_position = 20
        for i in range(variables_amount):
            c[i] = tk.Entry(root, width=5)
            c[i].place(x=x_position, y=115)
            if i==variables_amount-1:
                function_labels[i] = tk.Label(root, text=f'x{i+1}')
                function_labels[i].place(x=x_position+37, y=115)
            else:
                function_labels[i] = tk.Label(root, text=f'x{i+1} +')
                function_labels[i].place(x=x_position+37, y=115)
            x_position += 70
        function_type = tk.StringVar()
        function_type.set('min')
        function_type_menu = tk.OptionMenu(root, function_type, 'max', 'min')
        function_type_menu.place(x=x_position, y=110)
        
        #widgets for restrictions
        restrictions_text = tk.Label(root, text='Restrictions:', font=('', 13))
        restrictions_text.place(x=10, y=140)
        y_position = 130
        for i in range(restrictions_amount):
            y_position += 40
            x_position = 20
            for j in range(variables_amount):
                a[i][j] = tk.Entry(root, width=5)
                a[i][j].place(x=x_position, y=y_position)
                if j==variables_amount-1:
                    restrictions_labels[i][j] = tk.Label(root, text=f'x{j+1}')
                    restrictions_labels[i][j].place(x=x_position+37, y=y_position)
                else:
                    restrictions_labels[i][j] = tk.Label(root, text=f'x{j+1} +')
                    restrictions_labels[i][j].place(x=x_position+37, y=y_position)
                x_position += 70
            y_position -= 7
            restrictions_type[i] = tk.StringVar()
            restrictions_type[i].set('=')
            restrictions_type_menu[i] = tk.OptionMenu(root, restrictions_type[i],'>=', '=', '<=')
            restrictions_type_menu[i].place(x=x_position, y=y_position)
            x_position += 70
            y_position += 7
            b[i] = tk.Entry(root, width=5)
            b[i].place(x=x_position, y=y_position)

        #widgets for variables
        variables_text = tk.Label(root, text='Variables:', font=('', 13))
        variables_text.place(x=10, y=y_position+25)
        x_position = 20
        y_position += 60
        for i in range(variables_amount):
            variables_labels[i] = tk.Label(root, text=f'x{i+1}')
            variables_labels[i].place(x=x_position, y=y_position)
            variables_type[i] = tk.StringVar()
            variables_type[i].set('>=0')
            variables_type_menu[i] = tk.OptionMenu(root, variables_type[i], '∈R', '>=0', '<=0')
            variables_type_menu[i].place(x=x_position+20, y=y_position-7)
            x_position += 100

        #solve button widget
        solve_button = tk.Button(root, text='Solve', font=('', 10), width=7, command=simplex)
        solve_button.place(x=x_position+50, y=y_position-6)

    else:
        
        #error popup
        popup = tk.Toplevel(root)
        popup.title("Error")
        popup.iconbitmap('C:/Users/tomik/OneDrive/Plocha/zprogram/ikona.ico')
        window_width = 300
        window_height = 100
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        center_x = int(screen_width / 2 - window_width / 2)
        center_y = int(screen_height / 2 - window_height / 2)
        popup.geometry(f"{window_width}x{window_height}+{center_x}+{center_y-20}")
        tk.Label(popup, text= "Please enter only non-negative integers").place(x=45,y=30)
    
    #note if function has been used so we can destroy widgets for next usage
    if not was_used:
        was_used = True

apply_button = tk.Button(root, text='Apply', font=('', 10), width=7, command=apply)
apply_button.place(x=275, y=34)

def is_optimal(table):
    for x in table[-1][1:]:
        if x>0:
            return False
    return True

def simplex():
    global a, b, c, restrictions_type, variables_type, function_type, base, tableau, y_position

    #creating base
    base = [0]*(restrictions_amount)

    #getting values
    a = np.array(a)
    for i in range(restrictions_amount):
        for j in range(variables_amount):
            x = fr.Fraction(a[i][j].get())
            a[i][j] = x

    b = np.array(b)
    for i in range(restrictions_amount):
        x = fr.Fraction(b[i].get())
        b[i] = x
    
    c = np.array(c)
    for i in range(variables_amount):
        x = fr.Fraction(c[i].get())
        c[i] = x
    
    #changing from maximization to minimization
    if function_type.get() == 'max':
        c = [-x for x in c]

    #creating slack variables
    for i in range(variables_amount):
        if variables_type[i].get() == '<=0':
            for j in range(restrictions_amount):
                a[j][i] = -a[j][i]
            c[i] = -c[i]

    for i in range(len(a[0])):
        if variables_type[i].get() == '∈R':
            a = np.append(a, [[-x] for x in a[:,i]], axis=1)
            c = np.append(c, -c[i])

    #changing restrictions type
    for i in range(restrictions_amount):
        if restrictions_type[i].get() == '>=':
            slack_variable = [[0]]*restrictions_amount
            slack_variable[i] = [-1]
            a = np.append(a, slack_variable, axis=1)
            c = np.append(c,0)
        elif restrictions_type[i].get() == '<=':
            slack_variable = [[0]]*restrictions_amount
            slack_variable[i] = [1]
            a = np.append(a, slack_variable, axis=1)
            c = np.append(c,0)
            base[i]=len(a[0])
    
    #crating tableau
    tableau = np.array([[x] for x in b], dtype=np.float32)
    tableau = np.append(tableau, a, axis=1)
    tableau = np.append(tableau, [[0]*len(tableau[0])], axis=0)
    tableau = np.append([[0]*len(tableau[0])], tableau, axis=0)

    #making sure that right side vector is non-negative for first phase of dual-simplex
    #for i in range(restrictions_amount):
        #if tableau[i+1][0]<0:
            #tableau[i+1] = np.negative(tableau[i+1])

    #creating auxiliary variables
    for i in range(restrictions_amount):
        if restrictions_type[i].get() != '<=':
            auxiliary_variable = [[0]]*(restrictions_amount+2)
            auxiliary_variable[0] = [1]
            auxiliary_variable[i+1] = [1]
            tableau = np.append(tableau, auxiliary_variable, axis=1)
            base[i] = len(tableau[0])-1

    #first phase of dual-simplex
    for i in range(len(tableau[0])):
        if i == 0:
            value = 0
            for j in range(len(base)):
                value += tableau[0][base[j]]*tableau[j+1][0]
            tableau[-1][0] = value
        else:
            value =  - tableau[0][i]
            for j in range(len(base)):
                value += tableau[0][base[j]]*tableau[j+1][i]
            tableau[-1][i] = value

    counter = 0
    while not is_optimal(tableau):
        
        counter += 1
        if counter == 10:
            break
        
        #finding which variable will exit and which variable will enter the base
        pivot_entering = np.argmax(tableau[-1][1:])+1
        min_ratio = float('inf')
        for i in range(restrictions_amount):
            if tableau[i+1][pivot_entering]>0 and tableau[i+1][0]/tableau[i+1][pivot_entering] < min_ratio:
                min_ratio = tableau[i+1][0]/tableau[i+1][pivot_entering]
                pivot_exiting = i
        base[pivot_exiting] = pivot_entering
        
        #Gaussian elimination
        pivot = tableau[pivot_exiting+1][pivot_entering]
        for i in range(len(tableau[0])):
            tableau[pivot_exiting+1][i] = tableau[pivot_exiting+1][i]/pivot
        for i in range(restrictions_amount):
            omg = tableau[i+1][pivot_entering]
            if i != pivot_exiting:
                for j in range(len(tableau[0])):
                    tableau[i+1][j] = tableau[i+1][j] - tableau[pivot_exiting+1][j]*omg
            
        #creating criterium row
        for i in range(len(tableau[0])):
            if i == 0:
                value = 0
                for j in range(len(base)):
                    value += tableau[0][base[j]]*tableau[j+1][0]
                tableau[-1][0] = value
            else:
                value =  - tableau[0][i]
                for j in range(len(base)):
                    value += tableau[0][base[j]]*tableau[j+1][i]
                tableau[-1][i] = value
    #check if optimal value is zero
    if tableau[-1][0] !=0:
        y_position += 50
        answer_function = tk.Label(root, text=f'The problem has no feasible solution', font=('', 13)).place(x=10, y=y_position)
        return

    #second phase of dual-simplex
    tableau = tableau[1:-1,:len(c)+1]
    tableau = np.append([[0]+[x for x in c]], tableau, axis=0)
    tableau = np.append(tableau, [[0]*(len(c)+1)], axis=0)

    for i in range(len(tableau[0])):
        if i == 0:
            value = 0
            for j in range(len(base)):
                value += tableau[0][base[j]]*tableau[j+1][0]
            tableau[-1][0] = value
        else:
            value =  - tableau[0][i]
            for j in range(len(base)):
                value += tableau[0][base[j]]*tableau[j+1][i]
            tableau[-1][i] = value

    while not is_optimal(tableau):
    
        #finding which variable will exit and which variable will enter the base
        pivot_entering = np.argmax(tableau[-1][1:])+1
        min_ratio = float('inf')
        for i in range(restrictions_amount):
            if tableau[i+1][pivot_entering]>0 and tableau[i+1][0]/tableau[i+1][pivot_entering] < min_ratio:
                min_ratio = tableau[i+1][0]/tableau[i+1][pivot_entering]
                pivot_exiting = i
        
        #check if there exists an optimal solution
        if min_ratio == float('inf'):
            y_position += 50
            answer_function = tk.Label(root, text=f'The problem has no optimal solution', font=('', 13)).place(x=10, y=y_position)
            return
        base[pivot_exiting] = pivot_entering
        
        #Gaussian elimination
        pivot = tableau[pivot_exiting+1][pivot_entering]
        for i in range(len(tableau[0])):
            tableau[pivot_exiting+1][i] = tableau[pivot_exiting+1][i]/pivot
        for i in range(restrictions_amount):
            omg = tableau[i+1][pivot_entering]
            if i != pivot_exiting:
                for j in range(len(tableau[0])):
                    tableau[i+1][j] = tableau[i+1][j] - tableau[pivot_exiting+1][j]*omg
            
        #creating criterium row
        for i in range(len(tableau[0])):
            if i == 0:
                value = 0
                for j in range(len(base)):
                    value += tableau[0][base[j]]*tableau[j+1][0]
                tableau[-1][0] = value
            else:
                value =  - tableau[0][i]
                for j in range(len(base)):
                    value += tableau[0][base[j]]*tableau[j+1][i]
                tableau[-1][i] = value

    #getting optimal values ready to print
    optimal_values = [0]*variables_amount
    for i in range(len(base)):
        if base[i] <= variables_amount:
            if variables_type[base[i]-1].get() == '<=0':
                optimal_values[base[i]-1] = -tableau[i+1][0]
            elif variables_type[base[i]-1].get() == '∈R':
                j = 0
                counter = 1
                while j != base[i]-1:
                    if variables_type[j].get() == '∈R':
                        counter += 1
                    j += 1
                if base[i]+counter in base:
                    optimal_values[base[i]-1] = tableau[i+1][0]+tableau[i+1+counter]
            else:
                optimal_values[base[i]-1] = tableau[i+1][0]
    if function_type.get() == 'max':
        tableau[-1][0] = -tableau[-1][0]
    y_position += 50
    answer_function = tk.Label(root, text=f'Optimal function value: {float(tableau[-1][0])}', font=('', 13)).place(x=10, y=y_position)
    y_position += 20
    answer_variables = tk.Label(root, text=f'Optimal solution:', font=('', 13)).place(x=10, y=y_position)
    for i in range(variables_amount):
        y_position += 20
        answer_variables = tk.Label(root, text=f'x{i+1}={float(optimal_values[i])}', font=('', 10)).place(x=15, y=y_position)

root.mainloop()
